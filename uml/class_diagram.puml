@startuml

abstract class AbstractWorker{
+void do_work()
}

abstract class FileSystemEventHandler{
+void on_created(FileSystemEvent)
}

class FileObserver{
-AbstractEventLoop __loop
-Queue __queue
-str __path
-BaseObserver __observer

+FileObserver FileObserver(AbstractEventLoop, Queue, str)
+void start()
+void stop()
+void on_created(FileSystemEvent)

-void __add_to_queue(Any)
}

class Manager{
-AbstractEventLoop __loop
-FileObserver __file_observer
-Thread __observer_thread
-AbstractWorker[] __workers
-Task[] __tasks

+Manager Manager(AbstractEventLoop, AbstractWorker[], FileObserver)
+void start()
+void stop()

-Thread __start_file_observer()
}

class AudioExtractionWorker{
-ayncio.Queue __speech_queue
-ASRService __asr_service
-LLMService __llm_service
-WebSocketClient __client

+AudioExtractionWorker AudioExtractionWorker(asyncio.Queue, ASRService, LLMService, WebSocketClient)
+void do_work()
}

class AudioGenerationWorker{
-asyncio.Queue __text_queue
-TTSService __tts_service
-WebSocketClient __client

+AudioGenerationWorker AudioGenerationWorker(asyncio.Queue, TTSService, WebSocketClient)
+void do_work()
}

class ASRService{
-str __device
-str __language
-str __model_name
-AudioHelper __audio_helper
-Pipeline __transcriber

+ASRService ASRService()
+str transcribe(str)

-Pipeline __load_model()
}

class LLMService{
-{static}str __COMMAND_PROMPT
-{static}str __PERSON_DATA_PROMPT
-str __device
-str __model_name
-PreTrainedModel __model
-PreTrainedTokenizerFast __tokenizer

+LLMService LLMService()
+str generate_json_response(str, RequestType)

-str __generate_output(list[dict[str, str]])
-[PreTrainedModel, PreTrainedTokenizerFast] __load_model()
}

class TTSService{
-WebSocketClient __client
-str __piper_dir
-str __prepared_command

+TTSService TTSService(WebSocketClient)
+str generate_audio(str)

-Optional[str] __run_command_in_subprocess(str)
}

class WebSocketClient{
-str __uri
-asyncio.Queue __queue
-ClientConnection __ws
-str __register_message
-Task __receive_task

+WebSocketClient WebSocketClient(str, asyncio.Queue)
+void connect(Optional[str])
+void close_connection(Optional[str])
+void send_message(str)

-void __connect_internal()
-void __reconnect()
-void __receive_messages()
-void __message_handler(str)
}


class AudioHelper{
-set[str] __supported_decoding_formats

+bool is_file_empty(str)
+void convert_audio_to_wav(str, str)

-bool __is_file_format_supported(str)
-{static}bool __is_audio_empty(str, int, int)
-{static}set[str] __get_ffmpeg_decoding_formats()
}

enum RequestType{
BAD_REQUEST
PERSON_DATA
COMMAND_DATA
}


exception AudioGenerationError{
+str message

+AudioGenerationError AudioGenerationWorker(str)
}

exception LLMProcessingError{
+str message

+LLMProcessingError LLMProcessingError(str)
}

exception TranscriptionError{
+str message

+TranscriptionError TranscriptionError(str)
}

exception Exception{
}

Manager o--> AbstractWorker
Manager --> FileObserver
AbstractWorker <|.. AudioExtractionWorker
AbstractWorker <|.. AudioGenerationWorker
AudioExtractionWorker --> ASRService
AudioExtractionWorker --> LLMService
AudioExtractionWorker --> WebSocketClient
AudioGenerationWorker --> TTSService
AudioGenerationWorker --> WebSocketClient
FileSystemEventHandler <|-- FileObserver
ASRService --> AudioHelper
LLMService --> RequestType
FileObserver --> RequestType

AudioGenerationError ..|> Exception
LLMProcessingError ..|> Exception
TranscriptionError ..|> Exception

TTSService --> AudioGenerationError
LLMService --> LLMProcessingError
ASRService --> TranscriptionError
AudioHelper --> TranscriptionError


@enduml